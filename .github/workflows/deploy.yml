name: Deploy to Server with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-flask-app:latest -f db_test/Dockerfile db_test
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-flask-app:latest

      # Step 4: Copy docker-compose.yml and db-init-scripts to server
      - name: Copy configuration files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DOCKER_PORT }}
          source: "docker-compose.yml,db-init-scripts"
          target: "~/opt/app"
          strip_components: 0

      # Step 5: SSH into server and deploy using docker-compose
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DOCKER_PORT }}
          debug: true
          script: |
            cd ~/opt/app
            
            # Export secrets as environment variables
            export AZURE_STORAGE_ACCOUNT=${{ secrets.AZURE_STORAGE_ACCOUNT }}
            export AZURE_STORAGE_ACCESS_KEY=${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
            export ADMINKEY=${{ secrets.ADMINKEY }}
            
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend-flask-app:latest
            
            # Create the network if it doesn't exist
            docker network create mynetwork || true
            
            # Stop and remove existing containers
            docker compose down || true
            
            # Start the services using docker-compose
            docker compose up -d
            
            # Verify the containers are running
            docker ps
